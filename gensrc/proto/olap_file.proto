// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// Define file format struct, like data header, index header.

package doris;

import "olap_common.proto";
import "types.proto";

message ZoneMap {
    required bytes min = 1;
    required bytes max = 2;
    optional bool null_flag = 3;
}

message DeltaPruning {
    repeated ZoneMap zone_maps = 1;
}

// define OLAP FileVersion Message, Base, delta and cumulative delta 
// are both instance of Version 
// Base Version: (start_version == 0 && end_version > start_version) || [0, 0]
// Cumulative Version: (start_version >= 1 && end_version > start_version)
// Delta Version: start_version == end_version
message FileVersionMessage { // Deprecated, Use PDelta instead
    required uint32 num_segments = 1 [default = 0];
    required int32 start_version = 2;
    required int32 end_version = 3;
    required int64 version_hash = 4 [default = 0];
    required int64 max_timestamp = 5 [default = 0];
    required int64 index_size = 6 [default = 0];
    required int64 data_size = 7 [default = 0];
    optional int64 num_rows = 8 [default = 0];
    required int64 creation_time = 9 [default = 0];
    optional DeltaPruning delta_pruning = 10;
}

message PDelta {
    required int64 start_version = 1;
    required int64 end_version = 2;
    required int64 version_hash = 3;
    required int64 creation_time = 4;
    repeated SegmentGroupPB segment_group = 5;
    optional DeletePredicatePB delete_condition = 6;
}

enum RowsetTypePB {
    ALPHA_ROWSET = 0; // doris原有的列存格式
    BETA_ROWSET  = 1; // 新列存
}

enum RowsetStatePB {
    PREPARED = 0; // 表示正在写入Rowset
    COMMITTED = 1; // 表示rowset 写入完成，但是用户还不可见；这个状态下的rowset，BE不能自行判断是否删除，必须由FE的指令
    VISIBLE = 2; // 表示rowset 已经对用户可见
}

message RowsetMetaPB {
    required int64 rowset_id = 1;
    optional int64 partition_id = 2;
    optional int64 tablet_id = 3;
    optional int64 txn_id = 4;
    optional int32 tablet_schema_hash = 5;
    optional RowsetTypePB rowset_type = 6;
    optional RowsetStatePB rowset_state = 7;
    optional int32 start_version = 8;
    optional int32 end_version = 9;
    optional int64 version_hash = 10;
    optional int32 num_rows = 11;
    optional int64 total_disk_size = 12;
    optional int64 data_disk_size = 13;
    optional int64 index_disk_size = 14;
    // column min/max/null flag statistic info
    repeated ZoneMap zone_maps = 15;
    optional DeletePredicatePB delete_predicate = 16;
    optional bool empty = 17;
    optional string rowset_path = 18;
    optional PUniqueId load_id = 19;
    optional bool delete_flag =20;
    optional int64 creation_time = 21;
    // spare field id for future use
    optional bytes extra_properties = 50;
}

message AlphaRowsetExtraMetaPB {
    repeated SegmentGroupPB segment_groups = 1;
    repeated PendingSegmentGroupPB pending_segment_groups = 2;
}

message SegmentGroupPB {
    required int32 segment_group_id = 1;
    required int32 num_segments = 2;
    required int64 index_size = 3;
    required int64 data_size = 4;
    required int64 num_rows = 5;
    repeated ZoneMap zone_maps = 6;
    optional bool empty = 7;
}

message PPendingDelta {
    required int64 partition_id = 1;
    required int64 transaction_id = 2;
    required int64 creation_time = 3;
    repeated PendingSegmentGroupPB pending_segment_group = 4;
    optional DeletePredicatePB delete_condition = 5;
}

message PendingSegmentGroupPB {
    required int32 pending_segment_group_id = 1;
    required int32 num_segments = 2;
    required PUniqueId load_id = 3;
    repeated ZoneMap zone_maps = 4;
    optional bool empty = 5;
}

message SchemaChangeStatusMessage {
    required int64 related_tablet_id = 1;
    required int32 related_schema_hash = 2;

    repeated FileVersionMessage versions_to_be_changed = 3; // Deprecated. Use PDelta instead 

    required int32 schema_change_type = 4;

    repeated PDelta versions_to_changed = 5;
}

enum DataFileType {
    OLAP_DATA_FILE = 0; //Deprecated. Only columnar-wise format is supported.
    COLUMN_ORIENTED_FILE = 1;
}

enum KeysType {
    DUP_KEYS = 0;
    UNIQUE_KEYS = 1;
    AGG_KEYS = 2;
}

message DeletePredicatePB {
    optional int32 version = 1;
    repeated string sub_predicates = 2;
}

message OLAPHeaderMessage {
    required uint32 num_rows_per_data_block = 1;

    repeated FileVersionMessage file_version = 2; // Deprecated. Use PDelta instead.

    required int32 cumulative_layer_point = 3;
    required uint32 num_short_key_fields = 4;
    repeated ColumnMessage column = 5;
    required int64 creation_time = 6;
    repeated int32 selectivity = 7; // Deprecated.
    optional SchemaChangeStatusMessage schema_change_status = 8;
    optional DataFileType data_file_type = 9 [default = OLAP_DATA_FILE];
    optional uint32 next_column_unique_id = 10 [default = 0];
    optional CompressKind compress_kind = 11 [default = COMPRESS_LZO];
    optional uint32 segment_size = 12 [default = 4292870144];
    repeated DeletePredicatePB delete_data_conditions = 13;
    // bloom filter false positive probability
    optional double bf_fpp = 14;
    optional KeysType keys_type = 15;
    repeated PDelta delta = 16;
    repeated PPendingDelta pending_delta = 17;
    repeated PDelta incremental_delta = 18;

    // if true, this tablet will not do compaction,
    // and does not create init version
    optional bool in_restore_mode = 19 [default = false];
    optional int64 tablet_id = 20;
    optional int32 schema_hash = 21;
    optional uint64 shard = 22;
    repeated RowsetMetaPB rowsets = 23;
    repeated RowsetMetaPB pending_rowsets = 24;
    repeated RowsetMetaPB incremental_rowsets = 25;
}

enum AlterTabletState {
    ALTER_PREPARE = 0;
    ALTER_RUNNING = 1;
    ALTER_FINISHED = 2;
    ALTER_FAILED = 3;
}

enum AlterTabletType {
    SCHEMA_CHANGE = 0;
    ROLLUP = 1;
}

message AlterTabletPB {
    optional AlterTabletState alter_state = 1;
    required int64 related_tablet_id = 2;
    optional int64 related_schema_hash = 3;
    optional AlterTabletType alter_type = 4;
    repeated RowsetMetaPB rowsets_to_alter = 5;
}

enum ColumnType {
    TINYINT = 0;
    SMALLINT = 1;
    INT = 2;
    BIGINT = 3;
    LARGEINT = 4;
    FLOAT = 5;
    DOUBLE = 6;
    DECIMAL = 7;
    CHAR = 8;
    VARCHAR = 9;
    HLL = 10;
    DATE = 11;
    DATETIME = 12;
}

message ColumnPB {
    required int32 unique_id = 1;
    optional string name = 2;
    required string type = 3;
    optional bool is_key = 4;
    optional string aggregation = 5;
    optional bool is_nullable = 6;
    optional bytes default_value = 7;
    optional int32 precision = 8;
    optional int32 frac = 9;
    optional int32 length = 10;
    optional int32 index_length = 11;
    optional bool is_bf_column = 12;
    optional int32 referenced_column_id = 13;
}

message TabletSchemaPB {
    optional KeysType keys_type = 1;
    repeated ColumnPB column = 2;
    optional int32 num_short_key_columns = 3;
    optional int32 num_rows_per_row_block = 4;
    optional CompressKind compress_kind = 5;
    optional double bf_fpp = 6;
    optional uint32 next_column_unique_id = 7;
}

enum TabletStatePB {
    PB_NOTREADY  = 0; // under alter table, rollup, clone
    PB_RUNNING = 1;
    PB_TOMBSTONED = 2;
    PB_STOPPED = 3;
    PB_SHUTDOWN = 4;
}

message TabletMetaPB {
    optional int64 table_id = 1;
    optional int64 partition_id = 2;
    optional int64 tablet_id = 3;
    optional int64 schema_hash = 4;
    optional int32 shard_id = 5;
    optional int64 creation_time = 6;
    optional int32 cumulative_layer_point = 7;

    optional TabletStatePB tablet_state = 8;
    optional TabletSchemaPB schema = 9;
    repeated RowsetMetaPB rs_metas = 10;
    repeated RowsetMetaPB inc_rs_metas = 11;
    optional AlterTabletPB alter_tablet_task = 12;
}

message OLAPIndexHeaderMessage {
    required int32 start_version = 1;
    required int32 end_version = 2;
    required int64 cumulative_version_hash = 3;

    required uint32 segment = 4;
    required uint32 num_rows_per_block = 5;
    optional bool null_supported = 6;
    optional bool delete_flag = 7;
}

message OLAPDataHeaderMessage {
    required uint32 segment = 2;
}

message OLAPRawDeltaHeaderMessage {
    required int32 schema_hash = 2;
}
